//Eight Queens Problem 
//Solution without goto

#include <iostream>
#include <cmath>
#include <cstdlib>

using namespace std;

void backtrack(int &col){
    col--;
    if(col==1){ exit(1);};

}

void  print(int q[]){
    static int cont=0;
    cout << ++ cont <<endl<<endl;
    for (int i=0; i<8; i++)
        cout << q[i]<<" ";
        cout <<endl<<endl;
}
bool ok(int q[], int cl) {
    for (int i =0; i<cl; i++) {
        if(q[cl]==q[i] || cl-i == abs(q[cl]-q[i])) return false;
        return true;
    }
}

int main() {
    int q[8]; q[0]=0;
    int c=0;

    bool from_backtrack =false;
    while (true) {
        while (c<8) {
	// goto NC
	    if (!from_backtrack) {
		c++;
		if(c==8) break;
		q[c]=-1;
	    }
    	    from_backtrack = false;
            while (q[c]<8) {
	    	q[c]++;
            	if (q[c]=8) {
			backtrack(c);
			from_backtrack = true;
                }
	    	else{
                    for (int i=0; i < c; i++){
		    	if (ok(q,c)){ break;}
			//add the checking function
	            }
                }
            if (ok(q,c)){ break;}
             }
         }  
	print (q);
	//add print function
	backtrack(c);
        //add backtrack function
        from_backtrack = true;
    }

    return 0;
}
